'''
LeetCode #389 Find the Difference

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Input: s = "a", t = "aa"
Output: "a"
Explanation: 'a' is the letter that was added.

----------------------------------------------------------------------------------------------------------
This approach is also not very tricky. What is important is to analyze its complexity.

We might just think in worst case the string is of length N and each character has a frequency of 1. This would result in a hash map of O(N) space.
This is when your attention to detail comes to test.

> The problem states, string s and t consists of only lowercase letters.

The above statement implies we only have 26 characters i.e. [a, z]. Thus, we have a space complexity for just 26 characters.

It's always good to clarify this with the interviewer as now the space complexity would just be constant.
Thus, this approach can also be implemented using array of length 26 as a hash table, where each index corresponds to a letter from [a, z].

Algorithm

1. Store all the characters of string s in a hash map called mapOfS.
    The key would be the character and value would be number of times the character appeared in the string.

2. Now, iterate through string t and for each character, check if it is present in the hash map counterS.

3. If the character is present in counterS then we just decrement the corresponding value by 1.

4. If the character is not present in counterS or has a frequency of zero in counterS it means we have found the extra character of string t.
'''

def findTheDifference(s, t):
  mapOfS = {}
  
  for char in s:
    if char not in mapOfS:
      mapOfS[char] = 0
    mapOfS[char] += 1
  
  for char in t:
    if char not in mapOfS or mapOfS[char] == 0:
      return char
    else:
      mapOfS[char] -= 1

print(findTheDifference("abcd","abcde")) # e
print(findTheDifference("a","aa")) # a

'''
Time Complexity: O(N), where NN is length of the strings. Since, we iterate through both the strings once.

Space Complexity: O(1), the problem states string s and string t have lowercase letters. Thus, the total number of unique characters and eventually buckets in the hash map possible are just 26.
'''
